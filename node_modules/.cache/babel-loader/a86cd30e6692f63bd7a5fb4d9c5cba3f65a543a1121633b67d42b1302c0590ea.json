{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container mt-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_post_form = _resolveComponent(\"post-form\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"게시글 수정\", -1 /* HOISTED */)), $setup.post ? (_openBlock(), _createBlock(_component_post_form, {\n    key: 0,\n    \"initial-data\": $setup.post,\n    \"is-edit\": true,\n    \"submit-button-text\": '수정',\n    onSubmit: $setup.updatePost\n  }, null, 8 /* PROPS */, [\"initial-data\", \"onSubmit\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","$setup","post","_createBlock","_component_post_form","key","onSubmit","updatePost","_createCommentVNode"],"sources":["/Users/user/Developer/boardpj/boardpjcli/src/components/PostEdit.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-4\">\n    <h2>게시글 수정</h2>\n    <post-form\n        v-if=\"post\"\n        :initial-data=\"post\"\n        :is-edit=\"true\"\n        :submit-button-text=\"'수정'\"\n        @submit=\"updatePost\"\n    />\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { postAPI } from '@/api'\nimport PostForm from './PostForm.vue'\n\nexport default {\n  components: {\n    PostForm\n  },\n\n  props: {\n    id: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const router = useRouter()\n    const post = ref(null)\n\n    const fetchPost = async () => {\n      try {\n        const response = await postAPI.getPost(props.id)\n        post.value = response.data\n      } catch (error) {\n        console.error('게시글 조회 실패:', error)\n      }\n    }\n\n    const updatePost = async (formData) => {\n      try {\n        await postAPI.updatePost(props.id, formData)\n        router.push(`/posts/${props.id}`)\n      } catch (error) {\n        console.error('게시글 수정 실패:', error)\n      }\n    }\n\n    onMounted(() => {\n      fetchPost()\n    })\n\n    return {\n      post,\n      updatePost\n    }\n  }\n}\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;;uBAA3BC,mBAAA,CASM,OATNC,UASM,G,0BARJC,mBAAA,CAAe,YAAX,QAAM,sBAEAC,MAAA,CAAAC,IAAI,I,cADdC,YAAA,CAMEC,oBAAA;IATNC,GAAA;IAKS,cAAY,EAAEJ,MAAA,CAAAC,IAAI;IAClB,SAAO,EAAE,IAAI;IACb,oBAAkB,EAAE,IAAI;IACxBI,QAAM,EAAEL,MAAA,CAAAM;2DARjBC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}